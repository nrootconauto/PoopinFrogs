update | hit_wall new_t ts=CFrogNum |
  health <= 0 ifTrue: [
    new_t _ #world getThingTemplate: 'CFrogNPC/DEAD' .
    new_t ~= template ifTrue: [
      animation_start_tS _ CFrogTime now asSeconds .
      animation_no_repeat _ 1 .
      template _  new_t .
      tongue _ 0 .
    ] .
    ^ 1 .
  ] .

  ts _ CFrogTime now .
  (ts - state_start_tS ) > state_duration ifTrue: [
    'stay angry until the target is out of view' .
    (state = 'Angry' and: (self canSeeThing: target )) ifTrue: [
      ^ 1 .
    ] .
    state _ 'Normal' .
  ].

  (tongue hasClass: CFrogTongue) ifTrue: [
    tongue update ifFalse: [      
      tongue _ 0 
    ]
    ^ 1 
  ] .
  state = 'Angry' ifTrue: [
    'Try to eat the player' .
    speed _ 128 / 30 * 5 .
    random_generator next < ( 1 / 30 ) ifTrue: [
      tongue _ CFrogTongue new .
      tongue eatTarget: target fromFrog: self .
      'Populate with values' .
      animation_start_tS _ CFrogTime now asSeconds .
      animation_no_repeat _ 1 .
      template _ #world getThingTemplate: 'CFrogNPC/TONGUE' .
      tongue update.
      ^ 1 
    ]
  ].

  state = 'Normal' ifTrue: [
     speed _ 128 / 30  * 2 . 
  ] .  

  state = 'Flee' ifTrue: [
    speed _ 128 / 30 * 7 .
    'Run away from target or in random direction'.
    (random_generator next < (1.5 / 30) ) ifTrue: [
       random_generator next < .5 ifTrue: [
         angle _ target angleBetween: self
       ] ifFalse: [
         angle _ (6.28 * random_generator next )
       ]
    ] .
  ] .

  'Walk around ' .

  template _ #world getThingTemplate: 'CFrogNPC' .
  animation_no_repeat _ 0 .
  hit_wall _ self move: speed atAngle: angle .
  hit_wall ifTrue: [
    angle _ angle + (3.14 * random_generator next ) .
  ] .

  'Jump Randomly' .

  z = (#world tileHeightAtX: x / 128 atY: y / 128 ) ifTrue: [
     random_generator next < (.9 / 30) ifTrue: [
       momz _ #world gravity * 3 .
     ]
  ] .


