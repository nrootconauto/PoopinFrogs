update->* |
  w=C3DWorldManager
  old_x=CFrogNum 
  old_y=CFrogNum 
  old_z=CFrogNum 
  hit_wall=CFrogNum
  tS=CFrogNum 
  rocket=CPoopRocket
  dist=CFrogNum
|
  tS _ CFrogTime now asSeconds.
  momx2 _ 0 .
  momy2 _ 0 .
  w _ #world .

  health <= 0 ifTrue: [
    state ~= 'Dead' ifTrue: [
      template _ w getThingTemplate: 'CPoopMan/Dead' .
      state _ 'Dead' .
      animation_no_repeat _ 1 .
      animation_start_tS _ tS .
    ]
  ] .

  state = 'Dead' ifTrue: [
    ^ 1
  ] .

  state = 'Normal' ifTrue: [
    speed _ 64 / 30 * 3.4 .
    template _ w getThingTemplate: 'CPoopMan' .
    animation_no_repeat _ 0 .
    old_x _ x .
    old_y _ y .
    old_z _ z .
    hit_wall _ self move: speed atAngle: angle .
    hit_wall ifTrue: [
      (just_jumped not and: self isOnGround ) ifTrue: [
        'Try to jump over wall if low enough' .
        (((w tileHeightAtX: (x + (64 * angle cos ))/ 128 atY: (y + (64 * angle sin )) / 128 ) - z ) <= 2.1 and:
          random_generator next < .5 ) ifTrue: [
          momz _ .75 .
          x _ old_x .
          y _ old_y .
          z _ old_z .
          just_jumped _ 1 .
          ^ 1 
        ] ifFalse: [
          self isOnGround ifTrue: [
            angle _ angle + (.25 * (random_generator next - .5 ) + 3.14 ) .
          ]
        ] .
      ]
    ] .
    self isOnGround ifTrue: [
      just_jumped _ 0 .
    ].

    (target hasClass: C3DThing) ifFalse: [
      target _w getPlayer .
    ] .

    (random_generator next < ( .2 / 10 )) ifTrue: [
      'Cahnge direction' .
      random_generator next > .3 ifTrue: [
        angle _ (target->x - x  arg: target->y - y ) + ((random_generator next - .5) / 4 ) .
      ] ifFalse: [
        angle _ angle + ((random_generator next - .5 ) / 4 ) 
      ].
    ] .

    (random_generator next < ( .3 / 10 ) and: (self canSeeThing: target)) ifTrue: [
      state _ 'Throw' .
      template _ w getThingTemplate: 'CPoopMan/Throw' .
      animation_no_repeat _ 1 .
      animation_start_tS _ tS.
      state_start_tS _  tS.
      state_duration _ 8 / 4 .
      angle _ (target->x - x) arg: (target->y - y) .
      threw _ 0 .
    ] .
  ] .

  state = 'Throw' ifTrue: [
'threw' show .
threw not show .
((tS - state_start_tS) > (6 / 4))show .
'f' show .
((tS - state_start_tS) > (6 / 4) and: threw not ) show .
    ((tS - state_start_tS) > (6 / 4) and: threw not )ifTrue: [
'shit' show .
      threw _ 1 .
      rocket _ CPoopRocket new .
      rocket->from _ self . 
      rocket->x _ x . 
      rocket->y _ y . 
      rocket->z _ z + .5 .
      rocket -> angle _ (target->x - x arg: target->y - y ).
      angle _ rocket->angle .
      rocket->momx _ rocket->angle cos * 64 .
      rocket->momy _ rocket->angle sin * 64 .
      dist _ ((target->x - rocket->x) squared +(target->y - rocket->y)) sqrt .
      '64 is the throw force' .
      rocket->momz _ (target->z +.5 - rocket->z + ((random_generator next - .5 ) / 2 ) ) / dist * 64 .
    ] .
    (tS - state_start_tS) > state_duration ifTrue: [
      state _ 'Normal' .
    ] .    
  ] .
