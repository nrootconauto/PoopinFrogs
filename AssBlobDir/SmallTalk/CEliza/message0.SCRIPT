message0: str=CFrogStr ->* |
   player=CPlayer
   valid=CFrogArray
   split=CFrogArray 
   tmp=CFrogStr
   choose=CElizaReasm
   choose2=CElizaReasm
   wildcards=CFrogArray
   best_match_len=CFrogNum
   best_flag_cnt=CFrogNum
   set=CFrogArray
   score=CFrogNum
   accept=CFrogBlock
   ret*
|
  player _ #world getPlayer .
  tmp _ '' .
  split _ #() .
  str do: [:ch* | 
    ch isAlphaNumeric ifTrue: [
      tmp add: ch 
    ] ifFalse: [
      tmp size ifTrue: [
        split add: (self getSynonym: tmp copy )
      ] .
      tmp _ '' .
    ]
  ] .
  tmp size ifTrue: [
    split add: (self getSynonym: tmp copy )
  ] .

  valid _ reasms select: [:r=CElizaReasm | 
    (r matchWords: split ) and: ( r acceptsFlags: player->quest_flags )
  ] .

  valid size ifFalse: [
    ^ 0 .
  ] .


  best_match_len _ 0 .
  set _ valid collect: [:x=CElizaReasm|
    wildcards _ #() .
    x matchWords: split putWildcardsIn: wildcards .
    best_match_len _ best_match_len max: wildcards size .
    score _ x acceptsFlags: cur_flags .
    'See below note' . 
    #( (x) (wildcards) (score) )
  ] .
  

  set _ set select:[:x=CFrogArray|
     (x at: 1) size = best_match_len
  ] .

'Pass 2,use one with best matched flags' .
  best_flag_cnt _ 0 .
  set do: [:x=CFrogArray|
'Accept flags returns 1 +number of matched flags'.
'I want the most matched flags' .
    best_flag_cnt _ best_flag_cnt max: (x at: 2).
  ] .

  set _ set select:[:x=CFrogArray|
     (x at: 2) = best_flag_cnt
  ] .

  '???' .
  set size ifFalse: [^ 0 ] .

's3' show .
  set size show.

  '#(CElizaReasm wildcards score )' .
  'Pick lowest frequnecy response' .
  split _  set at: (CFrogRandom new next * set size - .001) . 
  choose _ split at: 0 .
  set do: [:e*|
    choose2 _ e at: 0 .
'cc2' show .
    choose->freq show .
    choose2->freq show .
    choose->freq > choose2->freq ifTrue: [
      choose _ choose2 .
      split _ e 
    ] .
  ] .


  accept _ [
    choose->add_flags do: [:add=CFrogStr|
      (player->quest_flags has: add) ifFalse: [
        player->quest_flags add: add copy
      ] .
    ] .
    choose->remove_flags do: [:rem=CFrogStr|
      player->quest_flags remove: rem 
    ] .
    (choose->give_item_class hasClass: CFrogClass) ifTrue: [
      choose->give_item_class new
    ].
  ] .

'Choose result before adding quest_seen_responses' .

  ret _ choose reassemble: (split at: 1) .

  (choose->global_response_name hasClass: CFrogStr) ifTrue: [
    (player->quest_seen_responses has: choose->global_response_name ) ifFalse: [
      player->quest_seen_responses add: choose->global_response_name copy .
      accept value .
    ]
  ] ifFalse: accept .

  ^ ret .
