newLandscapeWithWidth: w=CFrogNum withHeight: h=CFrogNum
  -> C3DWorldManager 
|
  ret=C3DWorldManager
  player=CPlayer
  grid_sz=CFrogNum
  r=CFrogRandom
  vectors=CFrogArray
  tmp=CFrogArray
  angle=CFrogNum
  vector=CFrogArray
  g1=CFrogNum
  g2=CFrogNum
  g3=CFrogNum
  g4=CFrogNum
  lerp=CFrogBlock
  gx=CFrogNum
  gy=CFrogNum
  x1=CFrogNum
  x2=CFrogNum
  col=CFrogArray
  fill_with=CFrogBlock
  value_at=CFrogBlock
  final=CFrogNum
  water_threshold=CFrogNum
  water_depth=CFrogNum
  make_vectors=CFrogBlock
  dirt_vectors=CFrogBlock
  dirt_vectors=CFrogBlock
  get_ground_at=CFrogBlock
  ground=CFrogNum
  adj_ground=CFrogNum
  sand_threshold=CFrogNum
  pre=CFrogNum
|
  get_ground_at _ [:x=CFrogNum :y=CFrogNum|
'Start from bottom,most of top is air'.
    ground _ 1 .
    [(ground<127 and:
      (self getTileAtX: x atY: y atZ: ground)~=0)
      and: (self tileIsLiquidAtX: x atY: y atZ: ground)=0
    ] whileTrue: [
      ground _ ground + 1 .
    ].
    ground - 1 .
  ].

  r _ CFrogRandom new .
  ret _ self .
  #world _ ret .
  ret emptyWorldWithWidth: w withHeight: h .
  player _ CPlayer new .
  player -> x _ w / 2 + .5 . 
  player -> y _ h / 2 + .5 . 

  grid_sz _ 10 .

  
  'Perlin noise' .
  make_vectors _ [
    vectors _ #() .  
    0 to: (w / grid_sz) ceil + 1 do: [:x=CFrogNum|
      tmp _ #() .
      0 to: (h / grid_sz) ceil + 1 do: [:y=CFrogNum|
        angle _ r next * 6.28 .
        tmp add: angle .
      ] .
      vectors add: tmp .
    ] .
    vectors 
  ].
  make_vectors value .

  lerp _ [:a=CFrogNum :b=CFrogNum :v=CFrogNum |
     a + ((b - a )*v)
  ].

  value_at _ [:x=CFrogNum :y=CFrogNum|
    vectors perlinNoiseAtX: x / grid_sz atY: y / grid_sz .
  ].

  water_depth _ 1.5 .
  water_threshold _ .15 .
  sand_threshold _ water_threshold .


  0 to: w  do: [:x=CFrogNum|
    0 to: h do: [:y=CFrogNum|
      final _ (value_at value: x value: y) * 6 .
      pre _ final .
      'Heres the deal,sample noise on top of eachother to make sexy landscape'.
      final _ (value_at value: x /2 +(w/2)value: y / 2 + (h /2)) * 17 + final .

      'Dirt' .
      fill_with _ 3 . 
      0 to: final + 30 do: [:z=CFrogNum |
        #world setTile: fill_with atX: x atY: y atZ: z .
      ] .


      'Makr anges from 0->1'.
      pre _ pre / 6 * 2 + .5 .
      pre < water_threshold ifTrue: [
        pre _  ((water_threshold - pre) /water_threshold) * water_depth.

        ground _ get_ground_at value: x value: y .
        ground - pre - 1 to: ground + 1 do: [:z=CFrogNum|
          #world setTile: 0 atX: x atY: y atZ: z 
        ].
        ground - pre - 1 to: ground  do: [:z=CFrogNum|
          '6 is water'.
          #world setTile: 6 atX: x atY: y atZ: z 
        ].
      ].


    ].
'Dont freeze'.
    CFrogThread yield .
  ] .

  0 to: w  do: [:x=CFrogNum|
    0 to: h do: [:y=CFrogNum|
      final _ (value_at value: x value: y) * 2 + .5  .
      final < sand_threshold ifTrue: [
        ground _ (get_ground_at value: x value: y) .
        '15 is sand'.
        -2 to: 1 do:[:zoff=CFrogNum|
          #world setTile: 15 atX: x atY: y atZ: ground +zoff . 
        ].
        'Make adjacent non-water blocks made of sand'.
        -1 to: 1.1 by:2 do:[:xoff=CFrogNum|
          -1 to: 1.1 by:2 do:[:yoff=CFrogNum|
            final _ (value_at value: x+xoff value: y+yoff) * 2 + .5 .
            final > sand_threshold ifTrue:[
              adj_ground _ (get_ground_at value: x+xoff value: y+yoff) .
              adj_ground - 3  to: adj_ground do:[:z=CFrogNum|
                #world setTile: 15 atX: x+xoff atY: y+yoff atZ: z .
              ].
              'Make adjacent block lower,so you an get out of the water easy'.
              #world setTile: 0 atX: x+xoff atY: y+yoff atZ: adj_ground.
            ].
          ]
        ].
      ].
    ].
    'Dont freeze'.
    CFrogThread yield .
  ].

  ^ ret .
