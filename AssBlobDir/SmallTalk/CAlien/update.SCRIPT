update->* |
  w=C3DWorldManager
  p=CPlayer
  old_x=CFrogNum 
  old_y=CFrogNum 
  old_z=CFrogNum 
  hit_wall=CFrogNum
  tS=CFrogNum 
  rocket=CEnergyBall
  dist=CFrogNum
  pickup=CShitItemPickup
|
  tS _ CFrogTime now asSeconds.
  momx2 _ 0 .
  momy2 _ 0 .
  w _ #world .

  health <= 0 ifTrue: [
    state ~= 'Dead' ifTrue: [
      w sweepSoundForTime: 500 withMin: 40 withMax: 30 .
      template _ w getThingTemplate: 'CAlien/Dead' .
      animation_start_tS _ tS .
      animation_no_repeat _ 1 .
      self die .
    ] .
    state _ 'Dead' .
  ] .

  state = 'Dead' ifTrue: [
    ^ 1
  ] .

  state = 'Normal' ifTrue: [
    steps_to_walk _  steps_to_walk - 1 .
    template _ w getThingTemplate: 'CAlien' .
    animation_no_repeat _ 0 .
    old_x _ x .
    old_y _ y .
    old_z _ z .
    
    (target hasClass: C3DThing) ifFalse: [
      target _ self lookForTarget .
    ] .

    'Only walk around if target is defined'.
    (target hasClass:C3DThing) ifTrue: [
      self wander: 40 / 10 *  3.4 withJumpVelocity: .55 withTarget: target .
      ((steps_to_walk <= 0 or: random_generator next < .15 ) and: (self canSeeThing: target)) ifTrue: [
        state _ 'Shoot' .
        template _ w getThingTemplate: 'CAlien/Shoot' .
        animation_no_repeat _ 0 .
        animation_start_tS _ tS.
        state_start_tS _  tS.
        angle _ (target->x - x) arg: (target->y - y) .
        'Used for how many shots to shoot too' .
        steps_to_walk _ (random_generator next * 3) + 2.5 .
      ] .
    ] .
    steps_to_walk < 0 ifTrue: [
      steps_to_walk _ random_generator next * 10 * 3 .
    ] .
  ] .

  state = 'Shoot' ifTrue: [
    template _ w getThingTemplate: 'CAlien/Shoot' .
    (tS - state_start_tS) > (175 / 1000.) ifTrue: [
      state_start_tS _ tS .
'See above note' .
      steps_to_walk _ steps_to_walk - 1 .
      w noiseSoundForTime: 100 withMin: 50 withMax: 70 .
      rocket _ CEnergyBall new .
      rocket->from _ self . 
      rocket->x _ x . 
      rocket->y _ y . 
      rocket->z _ z + .5 .
      rocket -> angle _ (target->x - x arg: target->y - y ).
      angle _ rocket->angle .
      rocket->momx _ rocket->angle cos * 75 .
      rocket->momy _ rocket->angle sin * 75 .
      dist _ ((target->x - rocket->x) squared +(target->y - rocket->y)) sqrt .
      '75 is the shoot force' .
      rocket->momz _ (target->z +.5 - rocket->z + ((random_generator next - .5 ) / 2 ) ) / dist * 75 .
    ] .
    ((self  canSeeThing: target) and: steps_to_walk > 0) ifFalse: [
      steps_to_walk _ random_generator next * 10 * 3 .
      state _ 'Normal' . 
    ]
  ] .
